{
    "openapi": "3.0.0",
    "info": {
        "title": "esaj",
        "version": "1.0.0"
    },
    "components": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "paths": {
        "/api/auth/type": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Current type of authentication",
                "description": "",
                "responses": {
                    "200": {
                        "description": "we have 6 pair of authentications, which one of them can be current system authentication type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "1": {
                                            "status": true,
                                            "auth": "usernamePassword",
                                            "otp": "sms"
                                        },
                                        "2": {
                                            "status": true,
                                            "auth": "usernamePassword",
                                            "otp": "google2fa"
                                        },
                                        "3": {
                                            "status": true,
                                            "auth": "otp",
                                            "otp": "sms"
                                        },
                                        "4": {
                                            "status": true,
                                            "auth": "otpOrPassword",
                                            "otp": "google2fa"
                                        },
                                        "5": {
                                            "status": true,
                                            "auth": "otp",
                                            "otp": "sms"
                                        },
                                        "6": {
                                            "status": true,
                                            "auth": "otpOrPassword",
                                            "otp": "google2fa"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/check": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "user login check",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Check if user is logged in and getting user login info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "user": {
                                            "id": 1,
                                            "name": "jack",
                                            "mobile": "9891211111111"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "user logout",
                "description": "",
                "responses": {
                    "200": {
                        "description": "user logout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {}
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/refresh-token": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "user refresh token",
                "description": "",
                "responses": {
                    "200": {
                        "description": "user refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {}
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login and register",
                "description": "In this route base on type of authentication (you can get from route => '/api/auth/type') some fields are required like password in 'usernamePassword' type. \n\n 'OTP' => If you are in OTP mode and send just mobile then if OTP type is sms you get verification code and if is google2fa user already has the code in google authenticator app, and in the next step you should send mobile with code to get token (if user is not registered by sending it's mobile number will be and then get the code) \n\n 'usernamePassword' => In this mode you must sent mobile and password for registering and login, also if user activate 2step authentication base on system otp set by admin will be prompted for code before getting token\n\n 'otpOrPassword => In this mode if user has set password can send mobile and password otherwise he/she can click on send otp code",
                "operationId": "Register and login",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "number"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "required in some cases"
                                    },
                                    "code": {
                                        "type": "number",
                                        "description": "required in some cases"
                                    },
                                    "otpForce": {
                                        "type": "boolean",
                                        "description": "required in case type of system is otpOrPassword and user wants to login with otp"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "each response is differnt based on authentication type and fields you send to server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / google2fa [mobile] => for first time that user is not registerd": {
                                            "status": "true",
                                            "message": "google2fa-otp",
                                            "secret": "BH233IASNHJBMV2S",
                                            "QR_image": "..."
                                        },
                                        "otp / google2fa [mobile] => when user is already registerd": {
                                            "status": true,
                                            "message": "There is no need for sending verification in google 2FA authentication."
                                        },
                                        "otp / sms [mobile]": {
                                            "status": true,
                                            "message": "sms-otp"
                                        },
                                        "OTP / sms or google2fa [mobile, code]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        },
                                        "usernamePassword / sms or google2fa [mobile, password]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        },
                                        "otpOrPassword / sms [mobile]": {
                                            "status": true,
                                            "message": "sms-otp"
                                        },
                                        "otpOrPassword / google2fa [mobile] => for first time that user is not registerd": {
                                            "status": "true",
                                            "message": "google2fa-otp",
                                            "secret": "BH233IASNHJBMV2S",
                                            "QR_image": "..."
                                        },
                                        "otpOrPassword / google2fa [mobile] => when user is already registerd": {
                                            "status": true,
                                            "message": "There is no need for sending verification in google 2FA authentication."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, code]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, password]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "if user send incorrect code or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "OTP code is incorrect."
                                        },
                                        "usernamePassword / sms or google2fa [mobile, password]": {
                                            "status": false,
                                            "message": "Email & Password does not match with our record."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "OTP code is incorrect."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, password]": {
                                            "status": false,
                                            "message": "Email & Password does not match with our record."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "in case of validator errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The mobile must be between 12 and 12 digits. (and 2 more errors)",
                                        "errors": {
                                            "mobile": [
                                                "The mobile must be between 12 and 12 digits."
                                            ],
                                            "password": [
                                                "The password field is required when code is not present."
                                            ],
                                            "code": [
                                                "The code field is required when password is not present."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "in case of some server problems for example broken saving or ...",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "Something went Wrong, try again."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/set-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Set password",
                "description": "you can use this route for setting password\n* you should be aware that we don't have password setting in otp mode and usernameAndPassword",
                "operationId": "Set password",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "password"
                                ],
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "description": "required in some cases"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "each response is different based on authentication type and fields you send to server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Set and reset password",
                "description": "you can use this route for setting and resetting password\n* you should be aware that we don't have password setting and resetting in otp mode",
                "operationId": "Reset password",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "number"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "required in some cases"
                                    },
                                    "code": {
                                        "type": "number",
                                        "description": "required in some cases"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "each response is differnt based on authentication type and fields you send to server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / google2fa [mobile] => for first time that user is not registerd": {
                                            "status": "true",
                                            "message": "google2fa-otp",
                                            "secret": "BH233IASNHJBMV2S",
                                            "QR_image": "..."
                                        },
                                        "otp / google2fa [mobile] => when user is already registerd": {
                                            "status": true,
                                            "message": "There is no need for sending verification in google 2FA authentication."
                                        },
                                        "otp / sms [mobile]": {
                                            "status": true,
                                            "message": "sms-otp"
                                        },
                                        "OTP / sms or google2fa [mobile, code]": {
                                            "status": true,
                                            "message": "No need for password reset in this mode."
                                        },
                                        "usernamePassword / sms or google2fa [mobile, password]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        },
                                        "otpOrPassword / sms [mobile]": {
                                            "status": true,
                                            "message": "sms-otp"
                                        },
                                        "otpOrPassword / google2fa [mobile] => for first time that user is not registerd": {
                                            "status": "true",
                                            "message": "google2fa-otp",
                                            "secret": "BH233IASNHJBMV2S",
                                            "QR_image": "..."
                                        },
                                        "otpOrPassword / google2fa [mobile] => when user is already registerd": {
                                            "status": true,
                                            "message": "There is no need for sending verification in google 2FA authentication."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, code]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, password]": {
                                            "status": true,
                                            "message": "User Logged In Successfully",
                                            "token": "5|jfTLzssjtseYMnsVGQNQx7hlb3TYTODSdXc0fLKd"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "if user send incorrect code or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "OTP code is incorrect."
                                        },
                                        "usernamePassword / sms or google2fa [mobile, password]": {
                                            "status": false,
                                            "message": "Email & Password does not match with our record."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "OTP code is incorrect."
                                        },
                                        "otpOrPassword / sms or google2fa [mobile, password]": {
                                            "status": false,
                                            "message": "Email & Password does not match with our record."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "in case of validator errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The mobile must be between 12 and 12 digits. (and 1 more error)",
                                        "errors": {
                                            "mobile": [
                                                "The mobile must be between 12 and 12 digits."
                                            ],
                                            "password": [
                                                "The password field is required when code is present."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "in case of some server problems for example broken saving or ...",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "Something went Wrong, try again."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/reset-google2fa": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Reinit google2fa",
                "description": "you can use this route for reiniting google2fa\n* you should be aware that we don't have google2fa reiniting in otp=sms mode",
                "operationId": "Reinit google2fa",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "number"
                                    },
                                    "code": {
                                        "type": "number",
                                        "description": "required in some cases"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "each response is differnt based on authentication type and fields you send to server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "otp / sms [mobile] => when otp mode is sms": {
                                            "status": true,
                                            "message": "No need for re init google2fa in this mode"
                                        },
                                        "otp / google2fa [mobile]": {
                                            "status": true,
                                            "message": "sms-otp"
                                        },
                                        "usernamePassword / sms or google2fa [mobile, password]": {
                                            "status": "true",
                                            "message": "google2fa-otp",
                                            "secret": "BH233IASNHJBMV2S",
                                            "QR_image": "..."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "if user send incorrect code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "sms or google2fa [mobile, code]": {
                                            "status": false,
                                            "message": "OTP code is incorrect."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "in case of validator errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The mobile must be between 12 and 12 digits. (and 1 more error)",
                                        "errors": {
                                            "mobile": [
                                                "The mobile must be between 12 and 12 digits."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Fetching roles and permissions",
                "description": "",
                "responses": {
                    "200": {
                        "description": "In this route with super admin role can fetch data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "permissions": [
                                            {
                                                "id": 2,
                                                "name": "books.*"
                                            },
                                            {
                                                "id": 3,
                                                "name": "books.create"
                                            }
                                        ],
                                        "roles": [
                                            {
                                                "id": 1,
                                                "name": "tests"
                                            },
                                            {
                                                "id": 2,
                                                "name": "super-admin"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/get-role-permissions/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The role id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Fetching one role permissions",
                "description": "",
                "responses": {
                    "200": {
                        "description": "In this route with super admin role can fetch data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "permissionsOfRole": [
                                            {
                                                "id": 2,
                                                "name": "books.*"
                                            },
                                            {
                                                "id": 3,
                                                "name": "books.create"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/sync-permission-to-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "syncing permission from role",
                "description": "In this route with super admin role you can syncing permissions from role",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    },
                                    "permissions": {
                                        "type": "array",
                                        "description": "Like permissions[0], permissions[1]"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "permission has been successfully revoked to role"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/give-permission-to-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Giving permission to role",
                "description": "In this route with super admin role you can give permissions to role",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    },
                                    "permissions": {
                                        "type": "array",
                                        "description": "Like permissions[0], permissions[1]"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "permission has been successfully assigned to role"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/revoke-permission-to-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Revoking permission from role",
                "description": "In this route with super admin role you can revoke permissions from role",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    },
                                    "permission": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "permission has been successfully revoked to role"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/assign-role-to-user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Assigning role to user",
                "description": "In this route with super admin role you can assign role to user",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    },
                                    "user": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "roles has been successfully assigned to user"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/remove-role-to-user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Removing role to user",
                "description": "In this route with super admin role you can remove role from user",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    },
                                    "user": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "roles has been successfully removed from user"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/create-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "creating role",
                "description": "In this route with super admin role you can create role",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Role has been created successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/update-role/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The role id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Updating role",
                "description": "In this route with super admin role you can update role",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/acl/role/{id}": {
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The role id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Acl"
                ],
                "summary": "Deleting role",
                "description": "In this route with super admin role you can create role",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Fetching categories",
                "description": "In this route with super admin role or any role contains category.* or category.show, you can fetch categories",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "product",
                                                "title": "product1",
                                                "url": null,
                                                "text": null,
                                                "parent": 0,
                                                "order": 1,
                                                "theme": null,
                                                "class": null
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Creating and storing category",
                "description": "In this route with super admin role or any role contains category.* or category.create, you can create categories",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "data"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "string, min:3, max:100, unique"
                                    },
                                    "data": {
                                        "type": "string",
                                        "description": "required, json"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The category id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Updating category",
                "description": "In this route with super admin role or any role contains category.* or category.update, you can update categories",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "string, min:3, max:100, unique"
                                    },
                                    "data": {
                                        "type": "string",
                                        "description": "required, json"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The category id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Deleting category",
                "description": "In this route with super admin role or any role contains category.* or category.delete, you can delete categories",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/images/list/public/{group}/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "name of group like categories",
                        "example": "category"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    }
                ],
                "tags": [
                    "Images"
                ],
                "summary": "getting list of imagese",
                "description": "getting list of imagese for specific group like category",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "paths": [
                                            "Category-2-23489",
                                            "Category-2-32183",
                                            "Category-2-35843",
                                            "Category-2-45943",
                                            "Category-2-48043",
                                            "Category-2-51675",
                                            "Category-2-56245",
                                            "Category-2-63570",
                                            "Category-2-81545",
                                            "Category-2-82024",
                                            "Category-2-85333",
                                            "Category-2-main-38763"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/images/list/private/{group}/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "name of group like categories",
                        "example": "category"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Images"
                ],
                "summary": "getting list of imagese",
                "description": "getting list of imagese for specific group like category",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "paths": [
                                            "Category-2-23489",
                                            "Category-2-32183",
                                            "Category-2-35843",
                                            "Category-2-45943",
                                            "Category-2-48043",
                                            "Category-2-51675",
                                            "Category-2-56245",
                                            "Category-2-63570",
                                            "Category-2-81545",
                                            "Category-2-82024",
                                            "Category-2-85333",
                                            "Category-2-main-38763"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/images/public/get/{name}/{rand}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Category-2-81545"
                    },
                    {
                        "in": "path",
                        "name": "rand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "you shuold send a random to avoid cached images",
                        "example": 2234
                    }
                ],
                "tags": [
                    "Images"
                ],
                "summary": "getting public image",
                "description": "getting a single public image",
                "responses": {
                    "200": {
                        "description": "you get a picture as a response"
                    }
                }
            }
        },
        "/api/images/get/{name}/{rand}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Category-2-81545"
                    },
                    {
                        "in": "path",
                        "name": "rand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "you shuold send a random to avoid cached images",
                        "example": 2234
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Images"
                ],
                "summary": "getting private image",
                "description": "getting a single private image. permission depends on type of model for example category or user",
                "responses": {
                    "200": {
                        "description": "you get a picture as a response"
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/images/delete/{name}/{driver}/{type}": {
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "name of image",
                        "example": "category"
                    },
                    {
                        "in": "path",
                        "name": "driver",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "public/local"
                    },
                    {
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "model"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Images"
                ],
                "summary": "deleting image",
                "description": "delete single image. permission depends on type of model for example category or user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: Category-2-23489 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Fetching products",
                "description": "In this route with super admin role or any role contains product.* or product.show, you can fetch products",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "product",
                                                "name_en": null,
                                                "description": "test test test test",
                                                "description_full": null,
                                                "sku": "test",
                                                "price": 200,
                                                "type": "test",
                                                "minimum_sale": null,
                                                "dimension": null,
                                                "score": 0,
                                                "status": 0,
                                                "order": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Creating and storing product",
                "description": "In this route with super admin role or any role contains product.* or product.create, you can create products",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "type",
                                    "price"
                                ],
                                "properties": {
                                    "sku": {
                                        "type": "string",
                                        "description": "string, min:3, max:100, unique"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    },
                                    "name_en": {
                                        "type": "string",
                                        "description": "string, min:3, max:255"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, min:10, max:255"
                                    },
                                    "description_full": {
                                        "type": "string",
                                        "description": "string, min:50, max:1000"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, in: cell_internet, td_lte_internet, cell_direct_charge, cell_internet_direct_charge, cart"
                                    },
                                    "price": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "second_price": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "showable_price": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "minimum_sale": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "dimension": {
                                        "type": "string",
                                        "description": "string, min:3, max:50"
                                    },
                                    "deliverable": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "third_party_id": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "operator_id": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "profile_id": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The product id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Updating product",
                "description": "In this route with super admin role or any role contains product.* or product.update, you can update products",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "sku": {
                                        "type": "string",
                                        "description": "string, min:3, max:100, unique"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    },
                                    "name_en": {
                                        "type": "string",
                                        "description": "string, min:3, max:255"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, min:10, max:255"
                                    },
                                    "description_full": {
                                        "type": "string",
                                        "description": "string, min:50, max:1000"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, in: cell_internet, td_lte_internet, cell_direct_charge, cell_internet_direct_charge, cart"
                                    },
                                    "price": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "second_price": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "showable_price": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "minimum_sale": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "dimension": {
                                        "type": "string",
                                        "description": "string, min:3, max:50"
                                    },
                                    "deliverable": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "third_party_id": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "operator_id": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "profile_id": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The product id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Deleting product",
                "description": "In this route with super admin role or any role contains product.* or product.delete, you can delete products",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/private": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Fetching products",
                "description": "In this route with super admin role or any role contains product.* or product.private, you can fetch private products for selected users",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "product",
                                                "name_en": null,
                                                "description": "test test test test",
                                                "description_full": null,
                                                "sku": "test",
                                                "price": 200,
                                                "type": "test",
                                                "minimum_sale": null,
                                                "dimension": null,
                                                "score": 0,
                                                "status": 0,
                                                "order": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/bulk-update": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Bulk updating products",
                "description": "In this route with super admin role or any role contains product.* or product.update, you can update multiple products at once",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "products": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "description": "The product id"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "description": "string, min:3, max:255"
                                                },
                                                "name_en": {
                                                    "type": "string",
                                                    "description": "string, min:3, max:255"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "description": "string, min:10, max:255"
                                                },
                                                "description_full": {
                                                    "type": "string",
                                                    "description": "string, min:50, max:1000"
                                                },
                                                "sku": {
                                                    "type": "string",
                                                    "description": "string, min:3, max:100, unique"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "second_price": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "showable_price": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "minimum_sale": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "dimension": {
                                                    "type": "string",
                                                    "description": "string, min:3, max:50"
                                                },
                                                "deliverable": {
                                                    "type": "boolean",
                                                    "description": "boolean"
                                                },
                                                "status": {
                                                    "type": "boolean",
                                                    "description": "boolean"
                                                },
                                                "third_party_id": {
                                                    "type": "string",
                                                    "description": "string, max:255"
                                                },
                                                "operator_id": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "profile_id": {
                                                    "type": "number",
                                                    "description": "numeric"
                                                },
                                                "private": {
                                                    "type": "boolean",
                                                    "description": "boolean"
                                                }
                                            },
                                            "required": [
                                                "id"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "products"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Products updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Products updated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/assign-category/{id}": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The product id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Assigning category to product",
                "description": "In this route with super admin role or any role contains product.* or product.update, you can assign category to products",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "description": "required_with:address|numeric"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required_with:category_id|string|max:50"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/private/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetching private products",
                "description": "In this route, you can fetch private products for selected user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "product",
                                                "name_en": null,
                                                "description": "test test test test",
                                                "description_full": null,
                                                "sku": "test",
                                                "price": 200,
                                                "type": "test",
                                                "minimum_sale": null,
                                                "dimension": null,
                                                "score": 0,
                                                "status": 0,
                                                "order": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetching public cart products",
                "description": "In this route, you can fetch public cart products",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "product",
                                                "name_en": null,
                                                "description": "test test test test",
                                                "description_full": null,
                                                "sku": "test",
                                                "price": 200,
                                                "type": "test",
                                                "minimum_sale": null,
                                                "dimension": null,
                                                "score": 0,
                                                "status": 0,
                                                "order": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/sales": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "Fetching Sales",
                "description": "In this route with super admin role or any role contains sale.* or sale.show, you can fetch sales",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "sales": [
                                            {
                                                "id": 1,
                                                "title": "sale",
                                                "type": "percent",
                                                "value": "20.00",
                                                "start_date": "2022-05-20 20:05:00",
                                                "end_date": "2022-05-20 20:05:00",
                                                "status": 0
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "Creating and storing sale",
                "description": "In this route with super admin role or any role contains sale.* or sale.create, you can create sales",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "title",
                                    "type",
                                    "value"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, max:128"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, in:money, percent"
                                    },
                                    "value": {
                                        "type": "number",
                                        "description": "min:0, numeric"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "description": "date, date_format:Y-m-d H:i:s"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "description": "date, date_format:Y-m-d H:i:s, after_or_equal:start_date"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/sales/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The sale id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "Updating sale",
                "description": "In this route with super admin role or any role contains sale.* or sale.update, you can update sales",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "string, max:128"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "string, in:money, percent"
                                    },
                                    "value": {
                                        "type": "number",
                                        "description": "min:0, numeric"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "description": "date, date_format:Y-m-d H:i:s"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "description": "date, date_format:Y-m-d H:i:s, after_or_equal:start_date"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The sale id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "Deleting sale",
                "description": "In this route with super admin role or any role contains sale.* or sale.delete, you can delete sales",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/discounts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Discounts"
                ],
                "summary": "Fetching Discounts",
                "description": "In this route with super admin role or any role contains discount.* or discount.show, you can fetch discounts",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "code": "test",
                                                "type": "percent",
                                                "value": "20.00",
                                                "reusable": 1,
                                                "status": 0,
                                                "expired": "2022-05-20 20:05:00"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Discounts"
                ],
                "summary": "Creating and storing discount",
                "description": "In this route with super admin role or any role contains discount.* or discount.create, you can create discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "type",
                                    "value"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "description": "unique, string, max:255"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, unique, string, in:money, percent"
                                    },
                                    "value": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "reusable": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "expired_at": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "users": {
                                        "type": "array",
                                        "description": "numeric"
                                    },
                                    "products": {
                                        "type": "array",
                                        "description": "numeric"
                                    },
                                    "min_purchase": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "max_purchase": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/discounts/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The discount id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Discounts"
                ],
                "summary": "Updating discount",
                "description": "In this route with super admin role or any role contains discount.* or discount.update, you can update discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "description": "unique, string, max:255"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "unique, string, in:money, percent"
                                    },
                                    "value": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "reusable": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "expired_at": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "users": {
                                        "type": "array",
                                        "description": "numeric"
                                    },
                                    "products": {
                                        "type": "array",
                                        "description": "numeric"
                                    },
                                    "min_purchase": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "max_purchase": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The discount id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Discounts"
                ],
                "summary": "Deleting discount",
                "description": "In this route with super admin role or any role contains discount.* or discount.delete, you can delete discounts",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/{id}/{cart}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The product id"
                    },
                    {
                        "in": "path",
                        "name": "cart",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Key of cart"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Adding product to cart",
                "description": "In this route you can add product to cart. you should be aware before login you must after first item insertion to cart save returned cart key and use it in next requests after login first time you should send cart key for merging carts and after that it is not mandatory.",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 7 has been added to cart successfully.",
                                        "cart_key": "cart-panel-akbzxjcbs8c"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The product id"
                    },
                    {
                        "in": "path",
                        "name": "cart",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Key of cart"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Deleting product from cart",
                "description": "In this route you can remove product from cart. you should be aware before login you must send cart key and after login it is not mandatory.",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: :id has been deleted from cart successfully.",
                                        "cart_key": "cart-panel-akbzxjcbs8c"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/all/{cart}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "cart",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Key of cart"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Fetching current cart",
                "description": "In this route you can fetch cart. you should be aware before login you must send cart key and after login it is not mandatory.",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "cart": {
                                            "items": {
                                                "product-12": {
                                                    "quantity": 97,
                                                    "id": "product-12",
                                                    "discount_value": 0,
                                                    "product": {
                                                        "id": 12,
                                                        "name": "dYxk5yWIbitwFJCA",
                                                        "name_en": null,
                                                        "description": "buH2B4BkDP1qs9Pm",
                                                        "description_full": null,
                                                        "sku": "BBYarpFjUHzJ79AO\"",
                                                        "price": 48919,
                                                        "type": "a",
                                                        "minimum_sale": null,
                                                        "dimension": null,
                                                        "score": 0,
                                                        "status": 1,
                                                        "order": 12,
                                                        "options": null,
                                                        "created_at": "2022-10-23 23:42:39",
                                                        "updated_at": "2022-10-23 23:42:39"
                                                    }
                                                }
                                            },
                                            "discount": null
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/discount/{discount}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "discount",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Discount code"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Adding and removing discount code to cart",
                "description": "In this route you can add discount code and for removing you must not send any code.",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Discount added successfully",
                                        "cart_key": "cart-panel-akbzxjcbs8c"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/checkout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Checkout items in cart using wallet",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "returnUrl": {
                                        "type": "string",
                                        "example": "https://example.com/return"
                                    },
                                    "bank": {
                                        "type": "string",
                                        "example": "sample-bank"
                                    }
                                },
                                "required": ["returnUrl", "bank"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Checkout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Checked out successfully"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Checkout failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": false,
                                        "message": "Not enough money"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/delivery/{logistic}": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "logistic",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Discount code"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Adding delivery of products to csart",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "date",
                                    "deliveryBetweenStart",
                                    "deliveryBetweenEnd",
                                    "address_id"
                                ],
                                "properties": {
                                    "date": {
                                        "type": "string"
                                    },
                                    "deliveryBetweenStart": {
                                        "type": "number"
                                    },
                                    "deliveryBetweenEnd": {
                                        "type": "number"
                                    },
                                    "address_id": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Card to card requested"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Fetching orders",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            },
                                            {
                                                "otherItems": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or doesn't have propper permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Fetching payments",
                "responses": {
                    "200": {
                        "description": "status: canceled, paid, unpaid, reject | bank status: OK, canceled | type: online, card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            },
                                            {
                                                "otherItems": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or doesn't have propper permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/payments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Fetching client Payments",
                "description": "In this route, you can fetch client Payments",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payment/card/increase": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Increasing value of wallet with card to card payment",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "image"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "number",
                                        "description": "required, integer, min:100000, max:10000000"
                                    },
                                    "image": {
                                        "type": "array",
                                        "description": "array, required, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Card to card requested"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payment/bank/increase": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Increasing value of wallet with online bank payment",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "mobile",
                                    "return_url"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "number",
                                        "description": "required, integer, min:100000, max:10000000"
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "description": "required, string, min:12, max:12"
                                    },
                                    "return_url": {
                                        "type": "string",
                                        "description": "required, string, max:300"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Card to card requested"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payment/confirm/{payment}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "payment",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The payment id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "confirming card to card payment by admin",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Card to card confirmed"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or doesn't have propper permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/payment/reject/{payment}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "payment",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The payment id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "rejecting card to card payment by admin",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Card to card rejected"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or doesn't have propper permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Fetching transactions",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            },
                                            {
                                                "otherItems": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/check/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "webservice_code"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Checking status of transaction",
                "description": "Checking status of transaction",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "status": true
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/wallet/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Fetching client transactions",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            },
                                            {
                                                "otherItems": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not login or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/transfer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Transfering money from a user to another",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "mobile"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "number",
                                        "description": "required, integer, min:100000, max:10000000"
                                    },
                                    "mobile": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Transfer rquested"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/confirm-transfer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Confirming transfer by admin",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "transactionId"
                                ],
                                "properties": {
                                    "transactionId": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Transferred successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/reject-transfer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Rejecting transfer by admin",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "transactionId",
                                    "message"
                                ],
                                "properties": {
                                    "transactionId": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "required, string, min:10, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Transfer rejected"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/increase-by-admin": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Increasing value of wallet by admin",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "userId",
                                    "message"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "number",
                                        "description": "required, integer, min:100000, max:10000000"
                                    },
                                    "userId": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "required, string, min:10, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Increased succesfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/decrease-by-admin": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Wallets"
                ],
                "summary": "Increasing value of wallet by admin",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "userId",
                                    "message"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "number",
                                        "description": "required, integer, min:100000, max:10000000"
                                    },
                                    "userId": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "required, string, min:10, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Decreased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or dosn't have propper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logs": {
            "get": {
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-01-01"
                        },
                        "description": "Start date for filtering logs (inclusive)"
                    },
                    {
                        "in": "query",
                        "name": "end_date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-12-31"
                        },
                        "description": "End date for filtering logs (inclusive)"
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 15,
                            "example": 15
                        },
                        "description": "Number of logs per page"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1,
                            "example": 1
                        },
                        "description": "Page number"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Fetch paginated logs with optional date filtering",
                "description": "Returns paginated logs with the ability to filter by date range. Results are ordered by creation date in descending order.",
                "responses": {
                    "200": {
                        "description": "Successful response with paginated logs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "example": "651a1bcb8b9e8b9e8b9e8b9e"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "User logged in"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2023-01-15T08:30:00.000000Z"
                                                    }
                                                }
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 125
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 9
                                                }
                                            }
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": "string",
                                                    "example": "http://your-app.com/api/logs?page=1"
                                                },
                                                "last": {
                                                    "type": "string",
                                                    "example": "http://your-app.com/api/logs?page=9"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": null
                                                },
                                                "next": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "http://your-app.com/api/logs?page=2"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "properties": {
                                                "start_date": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The start date must be a valid date."
                                                    }
                                                },
                                                "end_date": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The end date must be a date after or equal to start date."
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User lacks proper permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/log/activity": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Fetching logs of activity",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "activities": []
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin or doesn't have propper permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/menus": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Menus"
                ],
                "summary": "Fetching Menus",
                "description": "In this route with super admin role or any role contains menu.* or menu.show, you can fetch menus",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Menus"
                ],
                "summary": "Creating and storing menus",
                "description": "In this route with super admin role or any role contains menu.* or menu.create, you can create menus",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "items"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required,'string','max:255','min:3'"
                                    },
                                    "items": {
                                        "type": "string",
                                        "description": "json"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/menus": {
            "get": {
                "tags": [
                    "Menus"
                ],
                "summary": "Fetching client Menus",
                "description": "In this route, you can fetch client Menus",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/menus/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The menu id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Menus"
                ],
                "summary": "Updating menu",
                "description": "In this route with super admin role or any role contains menu.* or menu.update, you can update discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "string, max:255, min:3"
                                    },
                                    "items": {
                                        "type": "string",
                                        "description": "json"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The discount id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Menus"
                ],
                "summary": "Deleting menu",
                "description": "In this route with super admin role or any role contains menu.* or menu.delete, you can delete menus",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logistics"
                ],
                "summary": "Fetching Logistics",
                "description": "In this route with super admin role or any role contains logistic.* or logistic.show, you can fetch logistics",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logistics"
                ],
                "summary": "Creating and storing logistics",
                "description": "In this route with super admin role or any role contains logistic.* or logistic.create, you can create logistics",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "city",
                                    "province",
                                    "country",
                                    "type",
                                    "price",
                                    "start_time",
                                    "end_time",
                                    "divide_time"
                                ],
                                "properties": {
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "country": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, max:128"
                                    },
                                    "capacity": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "price": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "min_price_for_free_delivery": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "start_delivery_after_day": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "start_delivery_after_time": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "start_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "end_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "divide_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "is_active_in_holiday": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "default": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_capital": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, max:250"
                                    },
                                    "days_not_working": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/logistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logistics"
                ],
                "summary": "Fetching client Logistics",
                "description": "In this route, you can fetch client logistics",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logistics/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The logistic id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "city",
                                    "province",
                                    "country",
                                    "type",
                                    "price",
                                    "start_time",
                                    "end_time",
                                    "divide_time"
                                ],
                                "properties": {
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "country": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:128"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, max:128"
                                    },
                                    "capacity": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "price": {
                                        "type": "number",
                                        "description": "required, numeric"
                                    },
                                    "min_price_for_free_delivery": {
                                        "type": "number",
                                        "description": "numeric"
                                    },
                                    "start_delivery_after_day": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "start_delivery_after_time": {
                                        "type": "number",
                                        "description": "digits_between:1,250"
                                    },
                                    "start_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "end_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "divide_time": {
                                        "type": "number",
                                        "description": "required, digits_between:1,250"
                                    },
                                    "is_active_in_holiday": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "default": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_capital": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, max:250"
                                    },
                                    "days_not_working": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Logistics"
                ],
                "summary": "Updating logistic",
                "description": "In this route with super admin role or any role contains logistic.* or logistic.update, you can update logistics",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The logistic id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logistics"
                ],
                "summary": "Deleting logistic",
                "description": "In this route with super admin role or any role contains logistic.* or logistic.delete, you can delete logistics",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/logistics/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The logistic id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Logistics"
                ],
                "summary": "Fetching client logistic",
                "description": "In this route, you can fetch client logistic",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/deliveries": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Deliveries"
                ],
                "summary": "Fetching Deliveries",
                "description": "In this route with super admin role or any role contains delivery.* or delivery.show, you can fetch deliveries",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/warehouses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Fetching Warehouses",
                "description": "In this route with super admin role or any role contains warehouse.* or warehouse.show, you can fetch warehouses",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Creating and storing warehouses",
                "description": "In this route with super admin role or any role contains warehouse.* or warehouse.create, you can create warehouses",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "product_id",
                                    "count",
                                    "price",
                                    "expiry_date"
                                ],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "weight": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "expiry_date": {
                                        "type": "string",
                                        "description": "required, date"
                                    },
                                    "warehouse_address": {
                                        "type": "string",
                                        "description": "string, max:500"
                                    },
                                    "source": {
                                        "type": "string",
                                        "description": "string, max:500"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/warehouses/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The warehouse id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "product_id",
                                    "count",
                                    "price",
                                    "expiry_date"
                                ],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "weight": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "expiry_date": {
                                        "type": "string",
                                        "description": "required, date"
                                    },
                                    "warehouse_address": {
                                        "type": "string",
                                        "description": "string, max:500"
                                    },
                                    "source": {
                                        "type": "string",
                                        "description": "string, max:500"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Warehouses"
                ],
                "summary": "Updating warehouse",
                "description": "In this route with super admin role or any role contains warehouse.* or warehouse.update, you can update warehouses",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The warehouse id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Deleting warehouse",
                "description": "In this route with super admin role or any role contains warehouse.* or warehouse.delete, you can delete warehouses",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/points": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Points"
                ],
                "summary": "Fetching Points",
                "description": "In this route with super admin role or any role contains point.* or point.show, you can fetch points",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Points"
                ],
                "summary": "Creating and storing points",
                "description": "In this route with super admin role or any role contains point.* or point.create, you can create points",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "point",
                                    "operator_id",
                                    "status",
                                    "type"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "integer",
                                        "description": "required, min:1000, max:1000000"
                                    },
                                    "point": {
                                        "type": "integer",
                                        "description": "required, min:1, max:1000"
                                    },
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "required"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/points/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The point id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "value",
                                    "point",
                                    "operator_id",
                                    "status",
                                    "type"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "integer",
                                        "description": "required, min:1000, max:1000000"
                                    },
                                    "point": {
                                        "type": "integer",
                                        "description": "required, min:1, max:1000"
                                    },
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "required"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Points"
                ],
                "summary": "Updating point",
                "description": "In this route with super admin role or any role contains point.* or point.update, you can update points",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The point id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Points"
                ],
                "summary": "Deleting point",
                "description": "In this route with super admin role or any role contains point.* or point.delete, you can delete points",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching Prizes",
                "description": "In this route with super admin role or any role contains point.* or point.show, you can fetch prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Creating and storing prizes",
                "description": "In this route with super admin role or any role contains prize.* or prize.create, you can create prizes",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "point"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "min:3, max:255 (required unless product_id is sent)"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "min:1000, max:1000000 (required if not physical and product_id is not sent)"
                                    },
                                    "point": {
                                        "type": "integer",
                                        "description": "required, min:1, max:1000"
                                    },
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required if not physical and product_id is not sent"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "in:cell_internet, td_lte_internet, cell_direct_charge, cell_internet_direct_charge, physical, discount (required unless product_id is sent)"
                                    },
                                    "profile_id": {
                                        "type": "integer",
                                        "description": "required if not physical and product_id is not sent"
                                    },
                                    "ext_id": {
                                        "type": "integer",
                                        "description": "required if not physical"
                                    },
                                    "operator_type": {
                                        "type": "integer",
                                        "description": "integer"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "tags": {
                                        "type": "array",
                                        "description": "string, max:100"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, max:65535"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes/items": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Creating and storing prizes items",
                "description": "In this route with super admin role or any role contains prize.* or prize.create, you can create prizes items",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "prize_id",
                                    "code"
                                ],
                                "properties": {
                                    "prize_id": {
                                        "type": "string",
                                        "description": "required, max:100"
                                    },
                                    "code": {
                                        "type": "integer",
                                        "description": "required"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The prize id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "point"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "min:3, max:255 (required unless product_id is sent)"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "min:1000, max:1000000 (required if not physical and product_id is not sent)"
                                    },
                                    "point": {
                                        "type": "integer",
                                        "description": "required, min:1, max:1000"
                                    },
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required if not physical and product_id is not sent"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "in:cell_internet, td_lte_internet, cell_direct_charge, cell_internet_direct_charge, physical, discount (required unless product_id is sent)"
                                    },
                                    "profile_id": {
                                        "type": "integer",
                                        "description": "required if not physical and product_id is not sent"
                                    },
                                    "ext_id": {
                                        "type": "integer",
                                        "description": "required if not physical"
                                    },
                                    "operator_type": {
                                        "type": "integer",
                                        "description": "integer"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "tags": {
                                        "type": "array",
                                        "description": "string, max:100"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "string, max:65535"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Prizes"
                ],
                "summary": "Updating prize",
                "description": "In this route with super admin role or any role contains prize.* or prize.update, you can update prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The prize id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Deleting prize",
                "description": "In this route with super admin role or any role contains prize.* or prize.delete, you can delete prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes-purchase": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching Prizes",
                "description": "In this route with super admin role or any role contains point.* or point.show, you can fetch prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/prizes": {
            "get": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching client Prizes",
                "description": "In this route, you can fetch client prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/prizes/{prize}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "title",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The prize title"
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching client prize",
                "description": "In this route, you can fetch client prize",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/prizes-purchase": {
            "get": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching client Prizes",
                "description": "In this route, you can fetch client prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/prizes-purchase/{prize}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "title",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The prize title"
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Fetching client prize",
                "description": "In this route, you can fetch client prize",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes/status/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The prize id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Changing status of prize",
                "description": "In this route with super admin role or any role contains prize.* or prize.update, you can change status of prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes-purchase/status/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The prize id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Prizes"
                ],
                "summary": "Changing status of prize",
                "description": "In this route with super admin role or any role contains prize.* or prize.update, you can change status of prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/prizes/purchase/{id}": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The prize id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "string",
                                        "description": "required, numeric, min_digits:12, max_digits:12"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Prizes"
                ],
                "summary": "Updating prize",
                "description": "In this route with super admin role or any role contains prize.* or prize.update, you can update prizes",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Fetching Users",
                "description": "In this route with super admin role or any role contains user.* or user.show, you can fetch users",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Creating and storing users",
                "description": "In this route with super admin role or any role contains users.* or users.create, you can create users",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required|numeric|digits_between:12,12"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "string, max:255, language only persian"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "email"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/two-step": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Changing status of two steps verification of logged in user",
                "description": "Changing status of two steps verification of logged in user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/add-images": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Creating and storing users",
                "description": "In this route with super admin role or any role contains user.* or user.create, you can create users",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "images"
                                ],
                                "properties": {
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users-soft-deleted": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Fetching soft deleted Users list",
                "description": "In this route with super admin role or any role contains user.* or user.show, you can fetch soft deleted users",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "string, max:255, language only persian"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "email"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Updating Users",
                "description": "In this route with super admin role or any role contains user.* or user.update, you can update users",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deleting user",
                "description": "In this route with super admin role or any role contains user.* or user.delete, you can delete users",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/restore/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Restoring user",
                "description": "In this route with super admin role or any role contains user.* or user.update, you can restore user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/financial/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User financial info",
                "description": "In this route you can get User financial info",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "takenValues": 11000,
                                        "values": 9000,
                                        "profit": 2000
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Fetching Settings",
                "description": "In this route with super admin role or any role contains settings.* or settings.show, you can fetch settings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Creating and storing settings",
                "description": "In this route with super admin role or any role contains settings.* or settings.create, you can create settings",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "sms": {
                                        "type": "integer",
                                        "description": "boolean"
                                    },
                                    "email": {
                                        "type": "integer",
                                        "description": "boolean"
                                    },
                                    "auth": {
                                        "type": "string",
                                        "description": "in:otp, otpOrPassword, usernamePassword"
                                    },
                                    "otp": {
                                        "type": "string",
                                        "description": "in:sms, google2fa"
                                    },
                                    "jwt_expiration_time": {
                                        "type": "integer",
                                        "description": "integer, min:1, max:1000"
                                    },
                                    "front": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/settings/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The settings id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "sms": {
                                        "type": "integer",
                                        "description": "boolean"
                                    },
                                    "email": {
                                        "type": "integer",
                                        "description": "boolean"
                                    },
                                    "auth": {
                                        "type": "string",
                                        "description": "in:otp, otpOrPassword, usernamePassword"
                                    },
                                    "otp": {
                                        "type": "string",
                                        "description": "in:sms, google2fa"
                                    },
                                    "jwt_expiration_time": {
                                        "type": "integer",
                                        "description": "integer, min:1, max:1000"
                                    },
                                    "front": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Updating settings",
                "description": "In this route with super admin role or any role contains settings.* or settings.update, you can update settings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The settings id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Deleting settings",
                "description": "In this route with super admin role or any role contains settings.* or settings.delete, you can delete settings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/packages/internet/{operator}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "operator",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The operator name: irancell, mci, rightel, shatel, aptel"
                    }
                ],
                "tags": [
                    "ESAJ"
                ],
                "summary": "Fetching internet packages",
                "description": "In this route you can fetch internet packages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "internet-packages": [
                                            {
                                                "name": "test",
                                                "price": 1000,
                                                "profile_id": "test"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profits": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profits"
                ],
                "summary": "Fetching Profits",
                "description": "In this route with super admin role or any role contains profit.* or profit.show, you can fetch profits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profits"
                ],
                "summary": "Creating and storing profits",
                "description": "In this route with super admin role or any role contains profit.* or profit.create, you can create profits",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "operator_id",
                                    "title",
                                    "profit"
                                ],
                                "properties": {
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    },
                                    "profit": {
                                        "type": "integer",
                                        "description": "required, numeric, digits_between:0,100"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profits/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profits"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "operator_id",
                                    "title",
                                    "profit"
                                ],
                                "properties": {
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    },
                                    "profit": {
                                        "type": "integer",
                                        "description": "required, numeric, digits_between:0,100"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating profit",
                "description": "In this route with super admin role or any role contains profit.* or profit.update, you can update profits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profits"
                ],
                "summary": "Deleting profit",
                "description": "In this route with super admin role or any role contains profit.* or profit.delete, you can delete profits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-splits": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitSplits"
                ],
                "summary": "Fetching ProfitSplits",
                "description": "In this route with super admin role or any role contains profit.* or profit.show, you can fetch profit-splits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitSplits"
                ],
                "summary": "Creating and storing profit-splits",
                "description": "In this route with super admin role or any role contains profit.* or profit.create, you can create profit-splits",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "profit_id",
                                    "title",
                                    "seller_profit"
                                ],
                                "properties": {
                                    "profit_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:100"
                                    },
                                    "seller_profit": {
                                        "type": "integer",
                                        "description": "required, numeric, digits_between:0,100"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-splits/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit-split id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitSplits"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "profit_id",
                                    "title",
                                    "seller_profit"
                                ],
                                "properties": {
                                    "profit_id": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:100"
                                    },
                                    "seller_profit": {
                                        "type": "integer",
                                        "description": "required, numeric, digits_between:0,100"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating profit-split",
                "description": "In this route with super admin role or any role contains profit.* or profit.update, you can update profit-splits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit-split id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitSplits"
                ],
                "summary": "Deleting profit-split",
                "description": "In this route with super admin role or any role contains profit.* or profit.delete, you can delete profit-splits",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "summary": "Fetching ProfitGroups",
                "description": "In this route with super admin role or any role contains profit.* or profit.show, you can fetch profit-groups",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "summary": "Creating and storing profit-groups",
                "description": "In this route with super admin role or any role contains profit.* or profit.create, you can create profit-groups",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "profit_split_id",
                                    "title"
                                ],
                                "properties": {
                                    "profit_split_id": {
                                        "type": "array",
                                        "description": "required, array"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-groups/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "summary": "Fetching ProfitGroup and profitSplits and profits of user",
                "description": "In this route you can fetch ProfitGroup and profitSplits and profits of user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-groups/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit-group id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "profit_split_id",
                                    "title"
                                ],
                                "properties": {
                                    "profit_split_id": {
                                        "type": "array",
                                        "description": "required, array"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating profit-group",
                "description": "In this route with super admin role or any role contains profit.* or profit.update, you can update profit-groups",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The profit-group id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "summary": "Deleting profit-group",
                "description": "In this route with super admin role or any role contains profit.* or profit.delete, you can delete profit-groups",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profit-groups/assign-profit-group-to-user/{id}": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "ProfitGroups"
                ],
                "summary": "Assigning profit groups to user",
                "description": "In this route with super admin role or any role contains profit.* or profit.assignProfitGroup, you can assign profit groups to user",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [],
                                "properties": {
                                    "profit_group_id": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Profit group has been assigned to user"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/top-up": {
            "post": {
                "tags": [
                    "Financials"
                ],
                "summary": "Purchasing product without cart",
                "description": "purchase product if type of product is acceptable",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile",
                                    "price",
                                    "product_id"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required, numeric, min: 12, max: 12"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "required, numeric"
                                    },
                                    "taken_value": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "fake_response": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "operator_type": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "discount_code": {
                                        "type": "string",
                                        "description": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "purchased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/top-up/package": {
            "post": {
                "tags": [
                    "Financials"
                ],
                "summary": "Purchasing internet package without cart",
                "description": "purchase internet package if type of product is internet package",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile",
                                    "profile_id",
                                    "product_id"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required, numeric, min: 12, max: 12"
                                    },
                                    "profile_id": {
                                        "type": "string",
                                        "description": "required, string"
                                    },
                                    "offerCode": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "offerType": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "fake_response": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "discount_code": {
                                        "type": "string",
                                        "description": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "purchased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Fetching Profiles",
                "description": "In this route with super admin role or any role contains profile.* or profile.show, you can fetch profiles",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Creating and storing profiles",
                "description": "In this route you can create profiles",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address",
                                    "postal_code",
                                    "store_name",
                                    "national_code",
                                    "gender"
                                ],
                                "properties": {
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "birth_date": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500, language only persian"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "required, string, max:50"
                                    },
                                    "profession": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "education": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "store_name": {
                                        "type": "string",
                                        "description": "required, string, max:255, language only persian"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "description": "required, string, max:255, in:male,female"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "string, max:50, unique"
                                    },
                                    "national_code": {
                                        "type": "string",
                                        "description": "required, string, max:255, unique"
                                    },
                                    "nationlegal_infol_code": {
                                        "type": "string",
                                        "description": "json, max:255, unique"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profiles"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address",
                                    "postal_code",
                                    "store_name",
                                    "national_code",
                                    "gender"
                                ],
                                "properties": {
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "birth_date": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500, language only persian"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "required, string, max:50"
                                    },
                                    "profession": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "education": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "store_name": {
                                        "type": "string",
                                        "description": "required, string, max:255, language only persian"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "description": "required, string, max:255, in:male,female"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "string, max:50, unique"
                                    },
                                    "national_code": {
                                        "type": "string",
                                        "description": "required, string, max:255, unique"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating profile",
                "description": "In this route with super admin role or any role contains profile.* or profile.update, you can update profiles",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profile": {
            "get": {
                "tags": [
                    "Profiles"
                ],
                "summary": "Fetching Profile of logged in user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profiles/by-admin/{id}": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Creating and storing profiles",
                "description": "In this route with super admin role or any role contains profile.* or profile.create, you can create profiles",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address",
                                    "postal_code",
                                    "store_name",
                                    "national_code",
                                    "gender"
                                ],
                                "properties": {
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "birth_date": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500, language only persian"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "required, string, max:50"
                                    },
                                    "profession": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "education": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "store_name": {
                                        "type": "string",
                                        "description": "required, string, max:255, language only persian"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "description": "required, string, max:255, in:male,female"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "string, max:50, unique"
                                    },
                                    "national_code": {
                                        "type": "string",
                                        "description": "required, string, max:255, unique"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Profiles"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address",
                                    "postal_code",
                                    "store_name",
                                    "national_code",
                                    "gender"
                                ],
                                "properties": {
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "birth_date": {
                                        "type": "string",
                                        "description": "date"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500, language only persian"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "required, string, max:50"
                                    },
                                    "profession": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "education": {
                                        "type": "string",
                                        "description": "string, max:255"
                                    },
                                    "store_name": {
                                        "type": "string",
                                        "description": "required, string, max:255, language only persian"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "description": "required, string, max:255, in:male,female"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "string, max:50, unique"
                                    },
                                    "national_code": {
                                        "type": "string",
                                        "description": "required, string, max:255, unique"
                                    },
                                    "images": {
                                        "type": "array",
                                        "description": "array, image, mimes:jpeg,png,jpg, max:2048"
                                    },
                                    "ips": {
                                        "type": "array",
                                        "description": "Like ips[0], ips[1]"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating profile",
                "description": "In this route with super admin role or any role contains profile.* or profile.update, you can update profiles",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/operators": {
            "get": {
                "tags": [
                    "Operators"
                ],
                "summary": "Fetching Operators",
                "description": "In this route with super admin role or any role contains operator.* or operator.show, you can fetch operators",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/operators/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The operator id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Operators"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "title"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, min:3, max:255"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "credit_cell_internet": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "credit_td_lte_internet": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "credit_cell_direct_charge": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "credit_cell_internet_direct_charge": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "permanent_cell_internet": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "permanent_td_lte_internet": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "permanent_cell_direct_charge": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "permanent_cell_internet_direct_charge": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "bill": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Updating operator",
                "description": "In this route with super admin role or any role contains operator.* or operator.update, you can update operators",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/package-list": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Package list",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "operator"
                                ],
                                "properties": {
                                    "operator": {
                                        "type": "string",
                                        "description": "required, string, in: aptel, rightel, irancell, mci, shatel"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "example": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": []
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/filter": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Filter",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "table",
                                    "items"
                                ],
                                "properties": {
                                    "table": {
                                        "type": "string",
                                        "description": "The name of the table to filter. Must be a string (min: 3, max: 100 characters)."
                                    },
                                    "items": {
                                        "type": "array",
                                        "description": "required, string, min:1, max:100"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "example": {
                                    "common in all": {
                                        "per_Page": [
                                            "between 1 to 100 default 10"
                                        ],
                                        "order_type": [
                                            "desc or asc default is desc"
                                        ]
                                    },
                                    "tables": {
                                        "ticket": {
                                            "admin": {
                                                "fields": [
                                                    "status",
                                                    "pagination"
                                                ],
                                                "criteria": [
                                                    "answered",
                                                    "answering",
                                                    "closed"
                                                ],
                                                "pagination": [
                                                    1,
                                                    0,
                                                    "default 1"
                                                ]
                                            },
                                            "public": {}
                                        },
                                        "phoneBook": {
                                            "admin": {
                                                "fields": [
                                                    "name",
                                                    "phone_number",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "name",
                                                    "phone_number",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "category": {
                                            "admin": {
                                                "fields": [
                                                    "products",
                                                    "type",
                                                    "operator",
                                                    "sim_card_type",
                                                    "period",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "products": [
                                                        "products // give you related model"
                                                    ],
                                                    "type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "sim_card_type": [
                                                        "credit",
                                                        "permanent"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "products",
                                                    "type",
                                                    "operator",
                                                    "sim_card_type",
                                                    "period",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "products": [
                                                        "products // give you related model"
                                                    ],
                                                    "type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "sim_card_type": [
                                                        "credit",
                                                        "permanent"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "activity": {
                                            "admin": {
                                                "fields": [
                                                    "created_at",
                                                    "updated_at",
                                                    "subject_id",
                                                    "causer_id",
                                                    "log_name",
                                                    "subject_type",
                                                    "event",
                                                    "causer_type",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {}
                                        },
                                        "user": {
                                            "admin": {
                                                "fields": [
                                                    "mobile",
                                                    "name",
                                                    "province",
                                                    "city",
                                                    "national_code",
                                                    "profile_confirm",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {}
                                        },
                                        "payment": {
                                            "admin": {
                                                "fields": [
                                                    "status",
                                                    "type",
                                                    "sum",
                                                    "groupBy",
                                                    "created_at",
                                                    "resnumber",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "canceled",
                                                        "paid",
                                                        "unpaid",
                                                        "reject",
                                                        "returned"
                                                    ],
                                                    "type": [
                                                        "card",
                                                        "online"
                                                    ],
                                                    "sum": [
                                                        "price"
                                                    ],
                                                    "groupBy": [
                                                        "status",
                                                        "bank_name",
                                                        "created_at"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "status",
                                                    "type",
                                                    "sum",
                                                    "groupBy",
                                                    "created_at",
                                                    "resnumber",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "canceled",
                                                        "paid",
                                                        "unpaid",
                                                        "reject",
                                                        "returned"
                                                    ],
                                                    "type": [
                                                        "card",
                                                        "online"
                                                    ],
                                                    "sum": [
                                                        "price"
                                                    ],
                                                    "groupBy": [
                                                        "status",
                                                        "bank_name",
                                                        "created_at"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "groupCharge": {
                                            "admin": {
                                                "fields": [
                                                    "status",
                                                    "group_type",
                                                    "sum",
                                                    "groupBy",
                                                    "created_at",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "canceled / 2",
                                                        "pending / 0",
                                                        "finished / 1"
                                                    ],
                                                    "group_type": [
                                                        "topup",
                                                        "package"
                                                    ],
                                                    "groupBy": [
                                                        "status",
                                                        "group_type",
                                                        "created_at"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "status",
                                                    "group_type",
                                                    "sum",
                                                    "groupBy",
                                                    "created_at",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "canceled / 2",
                                                        "pending / 0",
                                                        "finished / 1"
                                                    ],
                                                    "group_type": [
                                                        "topup",
                                                        "package"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "reportDailyBalance": {
                                            "admin": {
                                                "fields": [
                                                    "date",
                                                    "user_id",
                                                    "sum",
                                                    "groupBy",
                                                    "balance"
                                                ],
                                                "criteria": {
                                                    "sum": [
                                                        "balance"
                                                    ],
                                                    "groupBy": [
                                                        "user_id"
                                                    ],
                                                    "date": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "date",
                                                    "user_id",
                                                    "sum",
                                                    "groupBy",
                                                    "balance"
                                                ],
                                                "criteria": {
                                                    "sum": [
                                                        "balance"
                                                    ],
                                                    "date": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ]
                                                }
                                            }
                                        },
                                        "order": {
                                            "admin": {
                                                "fields": [
                                                    "status"
                                                ],
                                                "criteria": [
                                                    "canceled",
                                                    "received",
                                                    "posted",
                                                    "preparation",
                                                    "paid",
                                                    "reserved",
                                                    "unpaid",
                                                    "pagination"
                                                ],
                                                "pagination": [
                                                    1,
                                                    0,
                                                    "default 1"
                                                ]
                                            },
                                            "public": {}
                                        },
                                        "product": {
                                            "admin": {
                                                "fields": [
                                                    "categories",
                                                    "category",
                                                    "status",
                                                    "deliverable",
                                                    "type",
                                                    "operator",
                                                    "created_at",
                                                    "profile_id",
                                                    "sim_card_type",
                                                    "period",
                                                    "name",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "categories": [
                                                        "categories // give you related model"
                                                    ],
                                                    "status": [
                                                        0,
                                                        1
                                                    ],
                                                    "deliverable": [
                                                        0,
                                                        1
                                                    ],
                                                    "type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "sim_card_type": [
                                                        "credit",
                                                        "permanent"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "categories",
                                                    "status",
                                                    "deliverable",
                                                    "type",
                                                    "operator",
                                                    "created_at",
                                                    "sim_card_type",
                                                    "period",
                                                    "name",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "categories": [
                                                        "categories // give you related model"
                                                    ],
                                                    "status": [
                                                        0,
                                                        1
                                                    ],
                                                    "deliverable": [
                                                        0,
                                                        1
                                                    ],
                                                    "type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "sim_card_type": [
                                                        "credit",
                                                        "permanent"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "walletTransaction": {
                                            "admin": {
                                                "fields": [
                                                    "status",
                                                    "type",
                                                    "mobile",
                                                    "userName",
                                                    "product_type",
                                                    "created_at",
                                                    "detail",
                                                    "third_party_status",
                                                    "product_name",
                                                    "operator",
                                                    "province",
                                                    "city",
                                                    "charged_mobile",
                                                    "sum",
                                                    "groupBy",
                                                    "user",
                                                    "resnumber",
                                                    "pagination",
                                                    "detail_hide"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "confirmed",
                                                        "pending",
                                                        "rejected"
                                                    ],
                                                    "type": [
                                                        "increase",
                                                        "decrease"
                                                    ],
                                                    "product_type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "detail": [
                                                        "increase_admin",
                                                        "increase_online",
                                                        "increase_refund",
                                                        "decrease_online",
                                                        "increase_card",
                                                        "increase_transfer",
                                                        "decrease_admin",
                                                        "decrease_purchase",
                                                        "decrease_purchase_buyer",
                                                        "increase_purchase_esaj",
                                                        "increase_purchase_presenter",
                                                        "decrease_transfer"
                                                    ],
                                                    "detail_hide": [
                                                        "increase_admin",
                                                        "increase_online",
                                                        "increase_refund",
                                                        "decrease_online",
                                                        "increase_card",
                                                        "increase_transfer",
                                                        "decrease_admin",
                                                        "decrease_purchase",
                                                        "decrease_purchase_buyer",
                                                        "increase_purchase_esaj",
                                                        "increase_purchase_presenter",
                                                        "decrease_transfer"
                                                    ],
                                                    "third_party_status": [
                                                        0,
                                                        1
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "sum": [
                                                        "value",
                                                        "value,original_price"
                                                    ],
                                                    "groupBy": [
                                                        "status",
                                                        "type",
                                                        "product_type",
                                                        "operator_id",
                                                        "province",
                                                        "city",
                                                        "user_type",
                                                        "third_party_status",
                                                        "product_name",
                                                        "user_id"
                                                    ],
                                                    "user": [
                                                        "user // give you related model"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "status",
                                                    "type",
                                                    "mobile",
                                                    "product_type",
                                                    "created_at",
                                                    "detail",
                                                    "third_party_status",
                                                    "product_name",
                                                    "operator",
                                                    "province",
                                                    "city",
                                                    "charged_mobile",
                                                    "sum",
                                                    "groupBy",
                                                    "resnumber",
                                                    "pagination",
                                                    "detail_hide"
                                                ],
                                                "criteria": {
                                                    "status": [
                                                        "confirmed",
                                                        "pending",
                                                        "rejected"
                                                    ],
                                                    "type": [
                                                        "increase",
                                                        "decrease"
                                                    ],
                                                    "product_type": [
                                                        "cell_internet",
                                                        "td_lte_internet",
                                                        "cell_direct_charge",
                                                        "cell_internet_direct_charge",
                                                        "cart"
                                                    ],
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "detail": [
                                                        "increase_admin",
                                                        "increase_online",
                                                        "increase_refund",
                                                        "decrease_online",
                                                        "increase_card",
                                                        "increase_transfer",
                                                        "decrease_admin",
                                                        "decrease_purchase",
                                                        "decrease_purchase_buyer",
                                                        "increase_purchase_esaj",
                                                        "increase_purchase_presenter",
                                                        "decrease_transfer"
                                                    ],
                                                    "detail_hide": [
                                                        "increase_admin",
                                                        "increase_online",
                                                        "increase_refund",
                                                        "decrease_online",
                                                        "increase_card",
                                                        "increase_transfer",
                                                        "decrease_admin",
                                                        "decrease_purchase",
                                                        "decrease_purchase_buyer",
                                                        "increase_purchase_esaj",
                                                        "increase_purchase_presenter",
                                                        "decrease_transfer"
                                                    ],
                                                    "third_party_status": [
                                                        0,
                                                        1
                                                    ],
                                                    "operator": [
                                                        "mci",
                                                        "irancell",
                                                        "aptel",
                                                        "shatel",
                                                        "rightel"
                                                    ],
                                                    "sum": [
                                                        "value",
                                                        "value,original_price"
                                                    ],
                                                    "groupBy": [
                                                        "status",
                                                        "type",
                                                        "product_type",
                                                        "operator_id",
                                                        "province",
                                                        "city",
                                                        "user_type",
                                                        "third_party_status",
                                                        "product_name",
                                                        "user_id"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        },
                                        "walletTransactionExtra": {
                                            "admin": {
                                                "fields": [
                                                    "created_at",
                                                    "sum",
                                                    "group_by",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "sum": [
                                                        "value",
                                                        "value,taken_value"
                                                    ],
                                                    "groupBy": [
                                                        "created_at"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            },
                                            "public": {
                                                "fields": [
                                                    "created_at",
                                                    "sum",
                                                    "group_by",
                                                    "pagination"
                                                ],
                                                "criteria": {
                                                    "created_at": [
                                                        "Y-m-d or Y-m-d,Y-m-d"
                                                    ],
                                                    "sum": [
                                                        "value",
                                                        "value,taken_value"
                                                    ],
                                                    "groupBy": [
                                                        "created_at"
                                                    ],
                                                    "pagination": [
                                                        1,
                                                        0,
                                                        "default 1"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": []
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/landings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Landings"
                ],
                "summary": "Fetching Landings",
                "description": "In this route with super admin role or any role contains landing.* or landing.show, you can fetch landings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Landings"
                ],
                "summary": "Creating and storing landings",
                "description": "In this route with super admin role or any role contains landing.* or landing.create, you can create landings",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "title"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, max:100"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/landings": {
            "get": {
                "tags": [
                    "Landings"
                ],
                "summary": "Fetching client Landings",
                "description": "In this route, you can fetch client landings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/landings/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The landing id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "title"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required, string, max:100"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Landings"
                ],
                "summary": "Updating landing",
                "description": "In this route with super admin role or any role contains landing.* or landing.update, you can update landings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The landing id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Landings"
                ],
                "summary": "Deleting landing",
                "description": "In this route with super admin role or any role contains landing.* or landing.delete, you can delete landings",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/landings/{title}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "title",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The landing title"
                    }
                ],
                "tags": [
                    "Landings"
                ],
                "summary": "Fetching client landing",
                "description": "In this route, you can fetch client landing",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/comments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Fetching Comments",
                "description": "In this route with super admin role or any role contains comment.* or comment.show, you can fetch comments",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Creating and storing comments",
                "description": "In this route, you can create comments",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "comment",
                                    "model",
                                    "id"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    },
                                    "model": {
                                        "type": "string",
                                        "description": "required, string"
                                    },
                                    "id": {
                                        "type": "integer",
                                        "description": "required, numeric // id of model"
                                    },
                                    "comment_id": {
                                        "type": "integer",
                                        "description": "required, numeric // if you want to add comment under selected comment, you must give id of that comment"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/comments/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The comment id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Updating comment",
                "description": "In this route, you can update your own comments and then status will be deactivated until admin activate",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/comments/status/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The comment id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Changing status of comment",
                "description": "In this route with super admin role or any role contains comment.* or comment.update, you can change status of comments",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/phone-books": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Fetching PhoneBooks",
                "description": "In this route you can fetch PhoneBook",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "test",
                                                "phone_number": "123456789123",
                                                "last_settings": "{}"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Creating and storing PhoneBook",
                "description": "In this route you can create PhoneBooks",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "phone_number",
                                    "last_settings"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "required, unique, string, max:50"
                                    },
                                    "phone_number": {
                                        "type": "string"
                                    },
                                    "last_settings": {
                                        "type": "json",
                                        "description": "required, json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/phone-books/batch": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Creating and storing PhoneBook batch",
                "description": "Request must be like: {\n    \"phone_books\": [\n        {\n            \"name\": \"مخاطب شماره یک \",\n            \"phone_number\": \"9120000000\",\n            \"status\": true\n        }\n    ]\n}",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "phone_numbers"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "type": "json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/phone-books/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Checking a phone number availability in logged in user phone book",
                "description": "Checking a phone number availability in logged in user phone book",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "phone_number"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "type": "string",
                                        "description": "required, unique, string, min:12, max:12"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Phone number is available"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Phone number is not available"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/phone-books/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The PhoneBook id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Updating PhoneBooks",
                "description": "In this route you can update PhoneBooks",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "required, unique, string, max:50"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "description": "required, unique, string, min:12, max:12"
                                    },
                                    "last_settings": {
                                        "type": "json",
                                        "description": "required, json"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The PhoneBook id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PhoneBooks"
                ],
                "summary": "Deleting PhoneBook",
                "description": "In this route PhoneBooks",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/transaction/extras": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "WalletTransactionExtras"
                ],
                "summary": "Fetching WalletTransactionExtras",
                "description": "In this route you can fetch WalletTransactionExtras",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "name": "taken_value"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/transaction/extras/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The operator id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "WalletTransactionExtras"
                ],
                "summary": "Fetching WalletTransactionExtra",
                "description": "In this route you can fetch WalletTransactionExtra",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The WalletTransactionExtras id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "WalletTransactionExtras"
                ],
                "summary": "Updating WalletTransactionExtras",
                "description": "In this route you can update WalletTransactionExtras",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "taken_value": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The User id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Fetching tickets",
                "description": "In this route you can fetch tickets",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Creating and storing tickets",
                "description": "In this route you can create tickets",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "message"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required_without:ticket_id, string, min:3, max:50"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "required, string"
                                    },
                                    "ticket_id": {
                                        "type": "integer",
                                        "description": "numeric"
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "required_without:ticket_id, in:technical,billing,account,feature_request,general,feedback",
                                        "enum": [
                                            "technical",
                                            "billing",
                                            "account",
                                            "feature_request",
                                            "general",
                                            "feedback"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/by-user": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The User id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Fetching tickets",
                "description": "In this route you can fetch tickets",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/by-user-status": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The User id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Fetching users tickets status",
                "description": "In this route you can fetch users tickets status",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/by-user/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The User id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Fetching tickets",
                "description": "In this route you can fetch tickets",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/conversation/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ticket id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Fetching conversation",
                "description": "In this route you can fetch conversation",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/close/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ticket id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Closing ticket",
                "description": "In this route you can close ticket",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/panel-messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Fetching PanelMessages",
                "description": "In this route with super admin role or any role contains panel-message.* or panel-message.show, you can fetch PanelMessages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Creating and storing panel-messages",
                "description": "In this route with super admin role or any role contains panel-messages.* or panel-messages.create, you can create PanelMessages",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "title",
                                    "short_content",
                                    "body"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required,'string','max:255','min:3'"
                                    },
                                    "short_content": {
                                        "type": "string",
                                        "description": "required,'string','max:255','min:3'"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "required,'string','max:1000','min:3'"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_open": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/panel-messages": {
            "get": {
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Fetching client PanelMessages",
                "description": "In this route, you can fetch client PanelMessages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/panel-messages/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The panelMessage id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Updating panel-message",
                "description": "In this route with super admin role or any role contains menu.* or menu.update, you can update discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "short_content": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "string,'max:1000','min:3'"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_open": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "delete panel message by id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Deleting panel-message",
                "description": "In this route with super admin role or any role contains panel-message.* or panel-message.delete, you can delete panel-messages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/irancell/bill": {
            "post": {
                "tags": [
                    "IRANCELL"
                ],
                "summary": "Getting bill of permanent mobile numbers",
                "description": "Getting bill of permanent mobile numbers",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required, numeric, min: 12, max: 12"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "purchased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/irancell/sim-type": {
            "post": {
                "tags": [
                    "IRANCELL"
                ],
                "summary": "Getting type of irancell sim card",
                "description": "Getting type of irancell sim card",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required, numeric, min: 12, max: 12"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "purchased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/irancell/offers": {
            "post": {
                "tags": [
                    "IRANCELL"
                ],
                "summary": "Getting offers for mobile numbers",
                "description": "Getting offers for mobile numbers",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "mobile"
                                ],
                                "properties": {
                                    "mobile": {
                                        "type": "integer",
                                        "description": "required, numeric, min: 12, max: 12"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "purchased successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tokens/create": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "creating token",
                "description": "In this route you can create token for authenticated user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tokens": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Fetching Tokens",
                "description": "In this route you can fetch authenticated user tokens",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Deleting all tokens",
                "description": "In this route you can delete all of your tokens except your current token",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tokens/{id}": {
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The token id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Deleting token",
                "description": "In this route you can delete your token",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/username/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "username"
                    }
                ],
                "tags": [
                    "Usernames"
                ],
                "summary": "Getting mobile by username",
                "description": "Getting mobile by username",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "username": "test",
                                        "mobile": "989121111111"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "Fetching GroupCharge",
                "description": "In this route with super admin role or any role contains group-charge.* or group-charge.show, you can fetch GroupCharge",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The panelMessage id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Updating panel-message",
                "description": "In this route with super admin role or any role contains menu.* or menu.update, you can update discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "short_content": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "string,'max:1000','min:3'"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_open": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "delete panel message by id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Deleting panel-message",
                "description": "In this route with super admin role or any role contains panel-message.* or panel-message.delete, you can delete panel-messages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/group-charge": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "Fetching GroupCharge",
                "description": "In this route, you can fetch group charge of user that logged in",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/group-charge/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The panelMessage id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Updating panel-message",
                "description": "In this route with super admin role or any role contains menu.* or menu.update, you can update discounts",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "short_content": {
                                        "type": "string",
                                        "description": "string,'max:255','min:3'"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "string,'max:1000','min:3'"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    },
                                    "is_open": {
                                        "type": "boolean",
                                        "description": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "delete panel message by id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PanelMessages"
                ],
                "summary": "Deleting panel-message",
                "description": "In this route with super admin role or any role contains panel-message.* or panel-message.delete, you can delete panel-messages",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge/cancel/{id}": {
            "get": {
                "description": "New endpoint",
                "responses": {
                    "200": {
                        "description": "New response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "": ""
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The group-charge id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "Cancelling Group Charge",
                "description": "In this route with super admin role or any role contains group-charge.* or group-charge.cancel, you can cancel Groupcharge before 300 seconds after storing",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge/force/{id}": {
            "get": {
                "description": "force do topup",
                "responses": {
                    "200": {
                        "description": "force do topup",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "": ""
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The group-charge id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "force do topup Group Charge",
                "description": "In this route with super admin role or any role contains group-charge.* or group-charge.cancel, you can cancel Groupcharge before 60 seconds after storing",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge/topup/{productId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "Creating and storing Group topup",
                "description": "In this route with super admin role or any role contains group-charge.* or group-charge.create, you can create GroupCharge",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "phone_numbers",
                                    "price"
                                ],
                                "properties": {
                                    "phone_numbers": {
                                        "type": "json",
                                        "description": "required,'json'"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "required,'string','max:product second_price','min:product price'"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "webserviceCode": {
                                        "type": "string",
                                        "description": "string and required for webservices"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/group-charge/topup-package/{productId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "GroupCharge"
                ],
                "summary": "Creating and storing Group topup package",
                "description": "In this route with super admin role or any role contains group-charge.* or group-charge.create, you can create GroupCharge",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "phone_numbers",
                                    "price"
                                ],
                                "properties": {
                                    "phone_numbers": {
                                        "type": "json",
                                        "description": "required,'json'"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "description": "required,'string','max:product second_price','min:product price'"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "offerCode": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "offerType": {
                                        "type": "string",
                                        "description": "string"
                                    },
                                    "webserviceCode": {
                                        "type": "string",
                                        "description": "string and required for webservices"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tags": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Fetching tags",
                "description": "In this route with super admin role or any role containing tag.show, you can fetch models by tags.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "table",
                                    "tags"
                                ],
                                "properties": {
                                    "table": {
                                        "type": "string",
                                        "description": "required"
                                    },
                                    "tags": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "required, each max:100"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "data": [],
                                        "meta": {}
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not authorized to view tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "List or retrieve a specific tag",
                "description": "Returns a paginated list of tags, or a specific tag if the `id` query parameter is provided.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the tag to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Field to order by (default: id)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "name"
                        }
                    },
                    {
                        "name": "type_order",
                        "in": "query",
                        "description": "Order direction (asc or desc)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized"
                    },
                    "404": {
                        "description": "Not Found - Tag with given ID not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tags"
                ]
            }
        },
        "/api/tags/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Create tag",
                "description": "Allows users with tag.create permission to create or find a tag.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "title",
                                    "type"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "required"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "required"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not allowed to create tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tags/{tag}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Delete tag",
                "description": "Deletes a tag if it is not currently in use.",
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not allowed to delete tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tags/force/{tag}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Force delete tag",
                "description": "Forcefully deletes the tag and detaches it from all models.",
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not allowed to delete tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/irancell-offer-package": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "IrancellOfferPackage"
                ],
                "summary": "Fetching IrancellOfferPackage",
                "description": "In this route with super admin role or any role contains card-charge.* or card-charge.show, you can fetch CardCharge",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-charge": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "Fetching CardCharge",
                "description": "In this route with super admin role or any role contains card-charge.* or card-charge.show, you can fetch CardCharge",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "Creating and storing CardCharge",
                "description": "In this route you can create tickets",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file_name",
                                    "card_charges",
                                    "operator_id"
                                ],
                                "properties": {
                                    "file_name": {
                                        "type": "string",
                                        "description": "required:string, min:3, max:50"
                                    },
                                    "card_charges": {
                                        "type": "json",
                                        "description": "required, json"
                                    },
                                    "operator_id": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-charge/destroyOpen/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The cardCharge id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "delete of cardcharges group",
                "description": "delete of cardcharges group",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-charge/freeReport": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "Fetching CardCharge free cardcharges",
                "description": "In this route with super admin role or any role contains card-charge.* or card-charge.show, you can fetch CardCharge",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "519": 1,
                                                "520": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-charge/findBySerial?serial={serial}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "Fetching CardCharge with serial",
                "description": "In this route with super admin role or any role contains card-charge.* or card-charge.show, you can fetch CardCharge",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/card-charge/{id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The cardCharge id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "get card-charges of users",
                "description": "get card charges of users ",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/card-charge/buy": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "CardCharge"
                ],
                "summary": "buy CardCharge",
                "description": "In this route user can buy card charges",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "taken_value",
                                    "products"
                                ],
                                "properties": {
                                    "products": {
                                        "type": "json",
                                        "description": "required, json"
                                    },
                                    "taken_value": {
                                        "type": "integer",
                                        "description": "numeric"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/ftp/files": {
            "get": {
                "tags": [
                    "FTP"
                ],
                "summary": "List files on the FTP server",
                "operationId": "listFtpFiles",
                "responses": {
                    "200": {
                        "description": "List of files",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/ftp/download/{filename}": {
            "get": {
                "tags": [
                    "FTP"
                ],
                "summary": "Download a file from the FTP server",
                "operationId": "downloadFtpFile",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "required": true,
                        "description": "The path to the file on the FTP server (can include folders)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "folder/file.txt"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The file content",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "File not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Fetching PhysicalCardCharge for clients",
                "description": "In this route user fetch Orders",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/physical": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Fetching Order of physicalCardCharge for clients",
                "description": "In this route user fetch Orders",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Fetching Order by id of physicalCardCharge for clients and admins",
                "description": "In this route user fetch Orders",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/status/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "updating status of Order by id of physicalCardCharge admins",
                "description": "In this route user fetch Orders",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "description": "The new status of the order"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": 1
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/point-histories": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The Point History for client"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PointHistoriy"
                ],
                "summary": "get point-histories of users",
                "description": "get point-histories of users ",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/point-histories": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The Point History for admin"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "PointHistoriy"
                ],
                "summary": "get point-histories of admin",
                "description": "get point-histories of admin ",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addresses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Fetching addresses",
                "description": "In this route with super admin role or any role contains address.* or address.show, you can fetch addresses",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "id"
                        },
                        "description": "Field to order by"
                    },
                    {
                        "in": "query",
                        "name": "type_order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        },
                        "description": "Order direction"
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "user_id": 1,
                                                "title": "Home",
                                                "province": "Tehran",
                                                "city": "Tehran",
                                                "address": "Some street address",
                                                "postal_code": "1234567890",
                                                "phone": "1234567890",
                                                "mobile": "989121111111",
                                                "is_default": true,
                                                "created_at": "2023-01-01T00:00:00.000000Z",
                                                "updated_at": "2023-01-01T00:00:00.000000Z"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Creating and storing address",
                "description": "In this route with super admin role or any role contains address.* or address.create, you can create addresses",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address"
                                ],
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "description": "required, exists:users,id"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "nullable, string, max:255"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "sometimes, boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The province field is required. (and 2 more errors)",
                                        "errors": {
                                            "province": [
                                                "The province field is required."
                                            ],
                                            "city": [
                                                "The city field is required."
                                            ],
                                            "address": [
                                                "The address field is required."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/addresses/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Updating address",
                "description": "In this route with super admin role or any role contains address.* or address.update, you can update addresses",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "description": "required, exists:users,id"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "nullable, string, max:255"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "sometimes, boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The province field is required. (and 2 more errors)",
                                        "errors": {
                                            "province": [
                                                "The province field is required."
                                            ],
                                            "city": [
                                                "The city field is required."
                                            ],
                                            "address": [
                                                "The address field is required."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Deleting address",
                "description": "In this route with super admin role or any role contains address.* or address.delete, you can delete addresses",
                "responses": {
                    "200": {
                        "description": "Address deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/addresses": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Fetching client addresses",
                "description": "In this route clients can fetch their own addresses",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "id"
                        },
                        "description": "Field to order by"
                    },
                    {
                        "in": "query",
                        "name": "type_order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        },
                        "description": "Order direction"
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "data": [
                                            {
                                                "id": 1,
                                                "user_id": 1,
                                                "title": "Home",
                                                "province": "Tehran",
                                                "city": "Tehran",
                                                "address": "Some street address",
                                                "postal_code": "1234567890",
                                                "phone": "1234567890",
                                                "mobile": "989121111111",
                                                "is_default": true,
                                                "created_at": "2023-01-01T00:00:00.000000Z",
                                                "updated_at": "2023-01-01T00:00:00.000000Z"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Creating and storing client address",
                "description": "In this route clients can create their own addresses",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "province",
                                    "city",
                                    "address"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "nullable, string, max:255"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "sometimes, boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The province field is required. (and 2 more errors)",
                                        "errors": {
                                            "province": [
                                                "The province field is required."
                                            ],
                                            "city": [
                                                "The city field is required."
                                            ],
                                            "address": [
                                                "The address field is required."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/addresses/{id}": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Updating client address",
                "description": "In this route clients can update their own addresses",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "nullable, string, max:255"
                                    },
                                    "province": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "city": {
                                        "type": "string",
                                        "description": "required, string, max:255"
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "required, string, max:500"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "description": "nullable, string, max:50"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "sometimes, boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been updated successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Access denied"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "The province field is required. (and 2 more errors)",
                                        "errors": {
                                            "province": [
                                                "The province field is required."
                                            ],
                                            "city": [
                                                "The city field is required."
                                            ],
                                            "address": [
                                                "The address field is required."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The address id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Deleting client address",
                "description": "In this route clients can delete their own addresses",
                "responses": {
                    "200": {
                        "description": "Address deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Access denied"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/versions": {
            "get": {
                "tags": [
                    "Versions"
                ],
                "summary": "Get list of versions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by version id"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order by column"
                    },
                    {
                        "name": "type_order",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order type asc/desc"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of versions",
                        "content": {
                            "application/json": {
                                "example": {
                                    "data": []
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Unauthenticated."
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This action is unauthorized."
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Versions"
                ],
                "summary": "Create a new version",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "type",
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Type of version. Allowed values: admin, panel"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of version"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of version"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Version created successfully",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "message": "Saved successfully"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Unauthenticated."
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This action is unauthorized."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/versions/{version}": {
            "patch": {
                "tags": [
                    "Versions"
                ],
                "summary": "Update a version",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Version ID"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Type of version. Allowed values: admin, panel"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of version"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of version"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Version updated successfully",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "message": "Id: 1 has been updated successfully"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Unauthenticated."
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This action is unauthorized."
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Versions"
                ],
                "summary": "Delete a version",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Version ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version deleted successfully",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "message": "Id: 1 has been deleted successfully"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Unauthenticated."
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This action is unauthorized."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/versions/latest-by-type": {
            "get": {
                "tags": [
                    "Versions"
                ],
                "summary": "Get latest version by type",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Type of version: admin or panel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest version returned",
                        "content": {
                            "application/json": {
                                "example": {
                                    "data": {
                                        "id": 1,
                                        "type": "admin",
                                        "title": "v1",
                                        "description": "First version"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid type",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid type"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/versions/send-for-users": {
            "get": {
                "tags": [
                    "Versions"
                ],
                "summary": "Send latest version update for all users",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Type of version: admin or panel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest version returned",
                        "content": {
                            "application/json": {
                                "example": {
                                    "data": {
                                        "id": 1,
                                        "type": "admin",
                                        "title": "v1",
                                        "description": "First version"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid type",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid type"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/top-up/bulk": {
            "post": {
                "tags": [
                    "Financials"
                ],
                "summary": "Bulk TopUp",
                "description": "Perform multiple top-ups in a single request. Supports repeating the same top-up multiple times with `counter`.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "topups": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "product_id": { "type": "integer", "example": 1 },
                                                "mobile": { "type": "string", "example": "123456789012" },
                                                "price": { "type": "number", "example": 100 },
                                                "main_page": { "type": "boolean", "example": false },
                                                "taken_value": { "type": "number", "nullable": true },
                                                "operator_type": { "type": "string", "nullable": true },
                                                "ext_id": { "type": "integer", "enum": [59, 19], "nullable": true },
                                                "webservice_code": { "type": "string", "nullable": true },
                                                "fake_response": { "type": "boolean", "nullable": true },
                                                "return_url": { "type": "string", "nullable": true },
                                                "discount_code": { "type": "string", "nullable": true },
                                                "offerCode": { "type": "string", "nullable": true },
                                                "offerType": { "type": "string", "nullable": true },
                                                "counter": { "type": "integer", "example": 3, "description": "Number of times to repeat this topup" }
                                            },
                                            "required": ["product_id", "mobile", "price"]
                                        }
                                    }
                                },
                                "required": ["topups"]
                            },
                            "example": {
                                "topups": [
                                    {
                                        "product_id": 1,
                                        "mobile": "123456789012",
                                        "price": 100,
                                        "counter": 3
                                    },
                                    {
                                        "product_id": 2,
                                        "mobile": "123456789013",
                                        "price": 200,
                                        "counter": 2
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bulk top-up results",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "results": [
                                        { "status": true, "data": { "transaction_id": 1001 }, "product_id": 1, "mobile": "123456789012", "iteration": 1 },
                                        { "status": true, "data": { "transaction_id": 1002 }, "product_id": 1, "mobile": "123456789012", "iteration": 2 },
                                        { "status": true, "data": { "transaction_id": 1003 }, "product_id": 1, "mobile": "123456789012", "iteration": 3 },
                                        { "status": true, "data": { "transaction_id": 2001 }, "product_id": 2, "mobile": "123456789013", "iteration": 1 },
                                        { "status": true, "data": { "transaction_id": 2002 }, "product_id": 2, "mobile": "123456789013", "iteration": 2 }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/telegram/active-link/{code}": {
            "get": {
                "tags": [
                "Telegram"
                ],
                "summary": "Telegram Active Link",
                "description": "Activate Telegram link for user with optional verify code",
                "parameters": [
                {
                    "name": "code",
                    "in": "path",
                    "description": "Verification code for activating Telegram link (optional)",
                    "required": false,
                    "schema": {
                    "type": "string",
                    "example": "ABC123XYZ"
                    }
                }
                ],
                "responses": {
                "200": {
                    "description": "Activate Telegram link for user",
                    "content": {
                    "application/json": {
                        "example": {
                        "status": true,
                        "results": [
                            {
                            "message": "اتصال به تلگرام",
                            "link": "https://t.me/your-bot?start=ABC123XYZ"
                            }
                        ]
                        }
                    }
                    }
                },
                "400": {
                    "description": "Validation error",
                    "content": {
                    "application/json": {
                        "example": {
                        "status": false,
                        "message": "کد فعال‌سازی نامعتبر است یا منقضی شده."
                        }
                    }
                    }
                },
                "500": {
                    "description": "Server error"
                }
                }
            }
        },
         "/api/clients/telegram": {
            "get": {
                "tags": [
                    "Telegram"
                ],
                "summary": "Telegram Active User List",
                "description": "Telegram Active User List",
                "responses": {
                    "200": {
                        "description": "Telegram Active User List",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                     "results": [
                                        {
                                            "id": 1,
                                            "user_id": 1,
                                            "telegram_id": "123456789",
                                            "label": "My Telegram",
                                            "created_at": "2023-10-01T12:00:00Z",
                                            "updated_at": "2023-10-01T12:00:00Z"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "access denied"
                    },
                     "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/clients/telegram/{userTelegramAccount}": {
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The role id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Telegram"
                ],
                "summary": "Deleting telegram client",
                "description": "In this route clients can delete their own telegram accounts",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 2 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user tries to delete a telegram account that does not belong to them",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "This action is unauthorized."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/clients/user-settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Get list of user settings for the authenticated user",
                "description": "In this route clients can get their own user settings",
                "responses": {
                    "200": {
                        "description": "List of user settings",
                        "content": {
                            "application/json": {
                                "example": {
                                    "data": []
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Unauthenticated."
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Access denied"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Create a new user setting for the authenticated user",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "settings"
                                ],
                                "properties": {
                                    "settings": {
                                        "type": "object",
                                        "properties": {
                                            "minimum_wallet": {
                                                "type": "integer",
                                                "description": "required, integer, min:0"
                                            },"otp_telegram": {
                                                "type": "integer",
                                                "description": "integer, min:0, max:1"
                                            }
                                        },
                                        "description": "{\"minimum_wallet\":1000}"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "settings": {
                                    "minimum_wallet": 1000
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User setting created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Saved successfully"
                                    }
                                }
                            }
                        }
                    },
                     "403": {
                        "description": "access denied"
                    },
                     "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/clients/user-settings/{id}": {
            "patch": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update a specific user setting by ID for the authenticated user",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user setting id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "settings": {
                                        "type": "object",
                                        "properties": {
                                            "minimum_wallet": {
                                                "type": "integer",
                                                "description": "required, integer, min:0"
                                            },"otp_telegram": {
                                                "type": "integer",
                                                "description": "integer, min:0, max:1"
                                            }
                                        },
                                        "description": "{\"minimum_wallet\":1000}"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "settings": {
                                    "minimum_wallet": 1500
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User setting updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been updated successfully"
                                    }
                                }
                            }
                        }
                    },
                     "403": {
                        "description": "access denied"
                    },
                     "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The user setting id"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Delete a specific user setting by ID for the authenticated user",
                "responses": {
                    "200": {
                        "description": "User setting deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": true,
                                        "message": "Id: 1 has been deleted successfully."
                                    }
                                }
                            }
                        }
                    },
                     "403": {
                        "description": "access denied"
                    },
                     "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/clients/user/mobile-charged-before/{mobile}": {
            "get": {
                "tags": [
                    "Charged Mobiles"
                ],
                "summary": "Check if a mobile number has been charged before",
                "description": "This endpoint checks if the given mobile number has been used in any previous transaction.",
                "parameters": [
                    {
                        "name": "mobile",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^\\d{12}$"
                        },
                        "description": "The mobile number to check (exactly 12 digits)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mobile number check result",
                        "content": {
                            "application/json": {
                                "example": {
                                    "exists": true
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error for invalid mobile format",
                        "content": {
                            "application/json": {
                                "example": {
                                    "error": "Mobile must be exactly 12 digits"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/scheduled-topups": {
            "get": {
                "tags": [
                    "Scheduled Topups"
                ],
                "summary": "Get list of scheduled topups",
                "description": "Returns a paginated list of scheduled topups. Admins see all topups, users see only their own.",
                "parameters": [
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["id", "created_at", "updated_at", "scheduled_at", "status"]
                        },
                        "description": "Column to order by"
                    },
                    {
                        "name": "type_order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["asc", "desc"]
                        },
                        "description": "Order direction (asc or desc)"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "Number of records per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of scheduled topups",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "data": {
                                        "current_page": 1,
                                        "data": [
                                            {
                                                "id": 1,
                                                "user_id": 5,
                                                "scheduled_at": "2025-09-22T10:30:00",
                                                "status": "pending",
                                                "payload": "[{\"product_id\":1,...}]",
                                                "created_at": "2025-09-21T15:00:00",
                                                "updated_at": "2025-09-21T15:00:00",
                                                "user": {
                                                    "id": 5,
                                                    "name": "John Doe"
                                                }
                                            }
                                        ],
                                        "per_page": 10,
                                        "total": 20
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/scheduled-topups/cancel/{id}": {
            "post": {
                "tags": [
                    "Scheduled Topups"
                ],
                "summary": "Cancel a scheduled topup",
                "description": "Cancels a pending scheduled topup. Admins can cancel any topup, users can cancel only their own pending topups.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "ID of the scheduled topup to cancel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Topup canceled successfully",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": true,
                                    "message": "Scheduled top-up canceled successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Topup not found or already processed",
                        "content": {
                            "application/json": {
                                "example": {
                                    "status": false,
                                    "message": "Scheduled top-up not found or already processed"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/main-page/report": {
            "get": {
                "tags": [
                    "Main Page Report"
                ],
                "summary": "Get main page report statistics",
                "description": "Returns statistics for Telegram usage and multiple purchase usage counts.",
                "responses": {
                    "200": {
                        "description": "Report statistics",
                        "content": {
                            "application/json": {
                                "example": {
                                    "telegram_usage_count": 150,
                                    "multiple_top_up_transaction_count": 75,
                                    "multiple_top_up_users_count": 50
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    }
}
